# TypeProf 0.14.1

# Global variables
$mutex: Thread::Mutex
$rgb: RGB

# Classes
class Keyboard
  GPIO_OUT: Integer
  GPIO_IN: Integer
  HI: Integer
  LO: Integer
  MOD_KEYCODE: {KC_LCTL: Integer, KC_LSFT: Integer, KC_LALT: Integer, KC_LGUI: Integer, KC_RCTL: Integer, KC_RSFT: Integer, KC_RALT: Integer, KC_RGUI: Integer}
  KEYCODE: Array[Symbol]
  KEYCODE_SFT: {KC_EXLM: Integer, KC_AT: Integer, KC_HASH: Integer, KC_DLR: Integer, KC_PERC: Integer, KC_CIRC: Integer, KC_AMPR: Integer, KC_ASTER: Integer, KC_LPRN: Integer, KC_RPRN: Integer, KC_UNDS: Integer, KC_PLUS: Integer, KC_LCBR: Integer, KC_RCBR: Integer, KC_PIPE: Integer, KC_COLON: Integer, KC_DQUO: Integer, KC_TILD: Integer, KC_LABK: Integer, KC_RABK: Integer, KC_QUES: Integer}

  @before_filters: Array[^() -> void]
  @layers: Hash[Symbol?, Array[Array[Integer]]]
  @mode_keys: Array[untyped]
  @switches: Array[Array[Integer]]
  @layer_names: Array[Symbol]
  @anchor: bool
  @anchor_left: bool
  @rows: Array[Integer]
  @cols: Array[Integer]
  @offset_a: Integer
  @offset_b: Integer
  @locked_layer_name: Symbol?
  @keycodes: Array[String]
  @modifier: Integer
  @layer_name: Symbol?

  def initialize: -> nil
  attr_accessor split: bool
  attr_accessor uart_pin: Integer
  def append: (RGB feature) -> void
  def start_rgb: -> void
  def set_anchor: (Symbol val) -> void
  def init_pins: (Array[Integer] rows, Array[Integer] cols) -> void
  def add_layer: (Symbol name, Array[untyped] map) -> void
  def define_mode_key: (untyped key_name, untyped param) -> void
  def invert_sft: -> void
  def before_report: () { () -> void } -> void
  def keys_include?: (Symbol) -> bool
  def action_on_release: (Integer | Array[Integer] | Proc) -> void
  def action_on_hold: (Integer | Proc) -> void
  def start!: -> void
  def raise_layer: -> void
  def lower_layer: -> void
  def hold_layer: (Symbol layer_name) -> void
  def switch_layer: (Symbol layer_name) -> void
end
